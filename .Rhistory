?matrix()
?sample()
?n_distinct()
??n_distinct()
?match()
?filter()
?unique()
?colMeans
?pivot_wider
??pivot_wider
library(devtools)
devtools::check()
library(tidy2)
library(tidyr)
install.packages('tidyr')
library(tidyr)
library(rlang)
install.packages("rlang")
library(rlang)
library(tidyr)
devtools::check()
library(devtools)
install.packages('devtools')
library(devtools)
install.packages('tidyverse')
devtools::check()
devtools::check()
install.packages('gridExtra')
devtools::check()
library(magrittr)
library(dplyr)
library(rlang)
library(tidyr)
library(viridisLite)
library(grDevices)
library(gridExtra)
library(stats)
library(roxygen2)
?pivot_wider
?dev.off
install.packages('roxygen2')
library(devtools)
devtools::check()
library(usethis)
usethis::use_pipe()
devtools::document()
load("C:/Users/Vic/Documents/Projects/iliketurtles3/chapter 1/output/proportion_correct_all_1e+05.Rdata")
View(proportion_correct_all)
x <- factor(3)
x
as.numeric(x)
as.numeric(as.character(x))
load("C:/Users/Vic/Documents/Projects/iliketurtles3/chapter 1/output/probabilities_1e+05.Rdata")
View(probabilities)
library(devtools)
devtools::check()
load("C:/Users/Vic/Documents/Projects/iliketurtles3/chapter 1/output/probabilities_1e+05.Rdata")
View(probabilities)
# extract paternal contribution modes
PCMs <- unique(probabilities[, 1])
# extract max number of fathers
max_fathers <- max(probabilities[, 2])
# extract sample sizes
sample_sizes <- unique(probabilities[, 3])
# initialize dataframe
conditional_probabilities <- data.frame()
p = 1
s = 1
# create subset from data
# pull out paternal contribution mode and the sample size
subset1 <- probabilities %>%
dplyr::filter(across(1) == PCMs[p]) %>%
dplyr::filter(across(3) == sample_sizes[s])
# create subset from data
# pull out paternal contribution mode and the sample size
subset1 <- probabilities %>%
dplyr::filter(c(across(1)) == PCMs[p]) %>%
dplyr::filter(c(across(3)) == sample_sizes[s])
subset1
PCMs[p]
# create subset from data
# pull out paternal contribution mode and the sample size
subset1 <- probabilities %>%
dplyr::filter(.[[1]] == PCMs[p]) %>%
dplyr::filter(.[[3]] == sample_sizes[s])
subset1
# create subset from data
# pull out paternal contribution mode and the sample size
subset1 <- probabilities %>%
dplyr::filter(names(probabilities)[1] == PCMs[p]) %>%
dplyr::filter(.[[3]] == sample_sizes[s])
subset1
# create subset from data
# pull out paternal contribution mode and the sample size
subset1 <- probabilities %>%
dplyr::filter(probabilities[, 1] == PCMs[p]) %>%
dplyr::filter(.[[3]] == sample_sizes[s])
subset1
# create subset from data
# pull out paternal contribution mode and the sample size
subset1 <- probabilities %>%
dplyr::filter(probabilities[, 1] == PCMs[p]) %>%
dplyr::filter(probabilities[, 3] == sample_sizes[s])
probabilities[, 3]
sample_sizes[s]
probabilities[, 3] == sample_sizes[s]
probabilities %>%
dplyr::filter(probabilities[, 1] == PCMs[p])
probabilities %>%
dplyr::filter(probabilities[, 1] == PCMs[p]) %>%
dplyr::filter(probabilities[, 3] == sample_sizes[s])
class(probabilities(Sample_Size))
class(probabilities$Sample_Size)
filter(probabilities[, 3] == sample_sizes[s])
devtools::check()
devtools::check()
load("C:/Users/Vic/Documents/Projects/iliketurtles3/chapter 1/output/prettier_conditional_probabilities.Rdata")
View(prettier_conditional_probabilities)
probabilities %>%
dplyr::filter(probabilities[, 1] == PCMs[p] & probabilities[, 3] == sample_sizes[s])
devtools::check()
usethis::edit_r_environ()
library(devtools)
devtools::check()
usethis::use_version()
devtools::check()
?usethis::use_version
usethis::use_version()
usethis::use_version()
usethis::use_version()
usethis::use_version()
?usethis::use_version
usethis::use_version()
prop_correct[, 1]
load("~/Projects/multiple_paternity_power_analyses/output/proportion_correct_all_1e+05.Rdata")
proportion_correct_all[, 1]
class(proportion_correct_all[, 1])
source('code/clutches_to_sample.R')
library(MultiplePaternityPowerAnalyses)
clutches_to_sample(n_sims = 1,
pop_size = 100,
sample_size = 32,
paternal_contribution_mode = 'random',
Fprob = c(0.463, 0.318, 0.157, 0.034, 0.028),
Mprob = c(1),
clutches_mu = 4.95,
clutches_sd = 2.09,
prop_correct = proportion_correct_all,
scenario = 'base_Fprob_no_Mprob')
load("~/Projects/multiple_paternity_power_analyses/output/proportion_correct_all_1e+05.Rdata")
source('code/clutches_to_sample.R')
library(MultiplePaternityPowerAnalyses)
load("~/Projects/multiple_paternity_power_analyses/output/proportion_correct_all_1e+05.Rdata")
load("~/Projects/multiple_paternity_power_analyses/output/proportion_correct_all_1e+05.Rdata")
library(MultiplePaternityPowerAnalyses)
clutches_to_sample(n_sims = 1,
pop_size = 100,
sample_size = 32,
paternal_contribution_mode = 'random',
Fprob = c(0.463, 0.318, 0.157, 0.034, 0.028),
Mprob = c(1),
clutches_mu = 4.95,
clutches_sd = 2.09,
prop_correct = proportion_correct_all,
scenario = 'base_Fprob_no_Mprob')
usethis::use_version()
library(remotes)
remotes::install_github(repo = 'vquennessen/MultiplePaternityPowerAnalyses')
detach("package:MultiplePaternityPowerAnalyses", unload = TRUE)
library(remotes)
remotes::install_github(repo = 'vquennessen/MultiplePaternityPowerAnalyses')
remotes::install_github(repo = 'vquennessen/MultiplePaternityPowerAnalyses')
library(MultiplePaternityPowerAnalyses)
clutches_to_sample(n_sims = 1,
pop_size = 100,
sample_size = 32,
paternal_contribution_mode = 'random',
Fprob = c(0.463, 0.318, 0.157, 0.034, 0.028),
Mprob = c(1),
clutches_mu = 4.95,
clutches_sd = 2.09,
prop_correct = proportion_correct_all,
scenario = 'base_Fprob_no_Mprob')
clutches_to_sample(n_sims = 1,
pop_size = 100,
sample_size = 32,
paternal_contribution_mode = 'random',
Fprob = c(0.463, 0.318, 0.157, 0.034, 0.028),
Mprob = c(1),
clutches_mu = 4.95,
clutches_sd = 2.09,
prop_correct = proportion_correct_all,
scenario = 'base_Fprob_no_Mprob')
usethis::use_devtools()
usethis::use_devtools()
getwd()
load("~/Projects/multiple_paternity_power_analyses/output/proportion_correct_all_1e+05.Rdata")
prop_correct = proportion_correct_all
if (!is.data.frame(prop_correct)) {stop('prop_correct must be a data frame.')}
if (!is.character(prop_correct[, 1]) & !is.factor(prop_correct[, 1]))
{stop('Paternal Contribution Mode in prop_correct must be a character or
factor value.')}
if (!is.numeric(prop_correct[, 2]))
{stop('Fathers in prop_correct must be a numeric value.')}
if (!is.numeric(prop_correct[, 3]) & !is.factor(prop_correct[, 3]))
{stop('Sample_Size in prop_correct must be a numeric or factor value.')}
if (!is.numeric(prop_correct[, 4]))
{stop('Proportion_correct in prop_correct must be a numeric value.')}
if (!is.numeric(prop_correct[, 5]))
{stop('Marginal in prop_correct must be a numeric value.')}
!is.character(prop_correct[, 1]) & !is.factor(prop_correct[, 1])
usethis::use_version()
sum(c(1:100)/100*100 %% 10 == 0)
1/100*100
1 %% 10
1 %% 10 == 0
sum((c(1:100)/100*100) %% 10 == 0)
sum((c(1:1000)/1000*100) %% 10 == 0)
usethis::use_version()
usethis::use_version()
usethis::use_version()
usethis::use_version()
now()
??now()
library(lubridate)
now()
usethis::use_version()
usethis::use_version()
usethis::use_version()
load("C:/Users/Vic/Documents/Projects/multiple_paternity_power_analyses/output/probabilities.Rda")
View(probabilities)
usethis::use_version()
usethis::use_version()
